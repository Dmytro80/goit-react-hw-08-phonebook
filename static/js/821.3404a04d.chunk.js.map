{"version":3,"file":"static/js/821.3404a04d.chunk.js","mappings":"sLAEaA,E,QAAqBC,GAAAA,EAAH,gJ,SCK/B,EAJqB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtB,OAAO,SAACF,EAAD,UAAqBE,GAC7B,C,8FCFYC,EAAYF,EAAAA,GAAAA,MAAH,gEAKTG,GAAYH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,uGAOTK,GAAYL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,sJ,SCFtB,EAVkB,SAAC,GAA2B,IAAzBO,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC/B,OACE,UAACP,EAAD,CAAWQ,QAASH,EAApB,UACGE,EADH,KAEE,SAACN,EAAD,CAAWK,KAAMA,EAAMD,KAAMA,KAC7B,SAACF,EAAD,CAAWE,KAAMA,EAAMI,UAAU,QAGtC,C,qECVYC,E,QAAeZ,GAAAA,IAAH,2G,SCMzB,EAJyB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,OAAO,SAACW,EAAD,UAAeX,GACvB,C,8JCFYY,GAAab,EAAAA,EAAAA,IAAOc,EAAAA,GAAPd,CAAH,gN,SCIvB,EAJmB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACpB,OAAO,SAACY,EAAD,UAAaZ,GACrB,C,4ICHYc,E,QAAUf,GAAAA,IAAH,iI,SCKpB,EAJoB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACrB,OAAO,SAACc,EAAD,UAAUd,GAClB,C,8LCOKe,EAAgB,CACpBT,KAAM,GACNU,MAAO,GACPC,SAAU,IAGNC,EAASC,EAAAA,KAAaC,MAAM,CAChCd,KAAMa,EAAAA,KACHE,OACAC,IAAI,EAAG,cACPC,QACC,yHACA,0IAEDC,SAAS,oBACZR,MAAOG,EAAAA,KAAaH,QAAQQ,SAAS,qBACrCP,SAAUE,EAAAA,KACPE,OACAC,IAAI,EAAG,cACPE,SAAS,0BA+Cd,EA5CqB,WACnB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAExBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IAc1B,OACE,SAAC,KAAD,CACEhB,cAAeA,EACfiB,SAfiB,SAAC,EAAD,GAA+C,IAA5C1B,EAA2C,EAA3CA,KAAMU,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,SAAcgB,EAAgB,EAAhBA,UACjDR,GACES,EAAAA,EAAAA,IAAS,CACP5B,KAAMA,EAAKe,OACXL,MAAOA,EAAMK,OACbJ,SAAUA,EAASI,UAIvBY,GACD,EAMGE,iBAAkBjB,EAHpB,UAKE,UAAC,IAAD,YACE,UAAC,IAAD,YACE,SAACkB,EAAA,EAAD,CAAW9B,KAAK,OAAOC,KAAK,OAAOC,MAAM,cACzC,SAAC4B,EAAA,EAAD,CAAW9B,KAAK,QAAQC,KAAK,QAAQC,MAAM,WAC3C,SAAC4B,EAAA,EAAD,CAAW9B,KAAK,WAAWC,KAAK,WAAWC,MAAM,iBAEnD,UAAC6B,EAAA,EAAD,CAAQC,SAAUX,EAAWpB,KAAK,SAAlC,UACG,IACAoB,EAAY,iBAAmB,cAGjCG,IAAUH,IACT,SAACtB,EAAA,EAAD,gDAKT,E,UC7DD,EAXiB,WACf,OACE,UAAC,IAAD,YACE,SAACkC,EAAA,EAAD,WACE,+CAEF,SAAC,EAAD,MAGL,C","sources":["components/errorMessage/ErrorMessage.styled.js","components/errorMessage/ErrorMessage.jsx","components/formField/FormField.styled.js","components/formField/FormField.jsx","components/formFieldWrapper/FormFieldWrapper.styled.js","components/formFieldWrapper/FormFieldWrapper.jsx","components/formikForm/FormikForm.styled.js","components/formikForm/FormikForm.jsx","components/pageWrapper/PageWrapper.styled.js","components/pageWrapper/PageWrapper.jsx","components/registerForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ErrorMessageStyled = styled.p`\n  margin: 0 auto;\n  padding: 18px;\n  font-weight: 500;\n  font-size: 20px;\n  font-style: italic;\n  color: #d8000c;\n`;\n","import PropTypes from 'prop-types';\nimport { ErrorMessageStyled } from './ErrorMessage.styled';\n\nconst ErrorMessage = ({ children }) => {\n  return <ErrorMessageStyled>{children}</ErrorMessageStyled>;\n};\n\nexport default ErrorMessage;\n\nErrorMessage.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import styled from 'styled-components';\nimport { Field, ErrorMessage } from 'formik';\n\nexport const FormLabel = styled.label`\n  font-weight: 700;\n  color: #757575;\n`;\n\nexport const FormInput = styled(Field)`\n  width: 300px;\n  padding: 3px;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const FormError = styled(ErrorMessage)`\n  max-width: 350px;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  font-size: 14px;\n  font-weight: 500;\n  color: #d8000c;\n`;\n","import PropTypes from 'prop-types';\nimport { FormLabel, FormInput, FormError } from './FormField.styled';\n\nconst FormField = ({ name, type, title }) => {\n  return (\n    <FormLabel htmlFor={name}>\n      {title}:\n      <FormInput type={type} name={name} />\n      <FormError name={name} component=\"p\" />\n    </FormLabel>\n  );\n};\n\nexport default FormField;\n\nFormField.propTypes = {\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\nexport const IntupWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 18px;\n  margin-bottom: 22px;\n`;\n","import PropTypes from 'prop-types';\nimport { IntupWrapper } from './FormFieldWrapper.styled';\n\nconst FormFieldWrapper = ({ children }) => {\n  return <IntupWrapper>{children}</IntupWrapper>;\n};\n\nexport default FormFieldWrapper;\n\nFormFieldWrapper.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import styled from 'styled-components';\nimport { Form } from 'formik';\n\nexport const SubmitForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 450px;\n  border: 2px solid #2196f3;\n  border-radius: 4px;\n  padding: 50px;\n  background-color: #fff;\n`;\n","import PropTypes from 'prop-types';\nimport { SubmitForm } from './FormikForm.styled';\n\nconst FormikForm = ({ children }) => {\n  return <SubmitForm>{children}</SubmitForm>;\n};\n\nexport default FormikForm;\n\nFormikForm.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  min-height: calc(100vh - 50px);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import { Wrapper } from './PageWrapper.styled';\nimport PropTypes from 'prop-types';\n\nconst PageWrapper = ({ children }) => {\n  return <Wrapper>{children}</Wrapper>;\n};\n\nexport default PageWrapper;\n\nPageWrapper.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport FormField from 'components/formField/FormField';\nimport FormFieldWrapper from '../formFieldWrapper';\nimport FormikForm from '../formikForm';\nimport Button from 'components/button/Button';\nimport { useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/auth/selectors';\nimport ErrorMessage from 'components/errorMessage/ErrorMessage';\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .trim()\n    .min(9, 'Too Short!')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Name is required'),\n  email: Yup.string().email().required('Email is required'),\n  password: Yup.string()\n    .trim()\n    .min(7, 'Too Short!')\n    .required('Password is required'),\n});\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const isLoading = useSelector(selectIsLoading);\n\n  const error = useSelector(selectError);\n\n  const handleSubmit = ({ name, email, password }, { resetForm }) => {\n    dispatch(\n      register({\n        name: name.trim(),\n        email: email.trim(),\n        password: password.trim(),\n      })\n    );\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <FormikForm>\n        <FormFieldWrapper>\n          <FormField name=\"name\" type=\"text\" title=\"Username\" />\n          <FormField name=\"email\" type=\"email\" title=\"Email\" />\n          <FormField name=\"password\" type=\"password\" title=\"Password\" />\n        </FormFieldWrapper>\n        <Button disabled={isLoading} type=\"submit\">\n          {' '}\n          {isLoading ? 'In progress...' : 'Register'}\n        </Button>\n\n        {error && !isLoading && (\n          <ErrorMessage>Incorrect entry! Try again...</ErrorMessage>\n        )}\n      </FormikForm>\n    </Formik>\n  );\n};\n\nexport default RegisterForm;\n","import { Helmet } from 'react-helmet';\nimport RegisterForm from 'components/registerForm/RegisterForm';\nimport PageWrapper from '../components/pageWrapper';\n\nconst Register = () => {\n  return (\n    <PageWrapper>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </PageWrapper>\n  );\n};\n\nexport default Register;\n"],"names":["ErrorMessageStyled","styled","children","FormLabel","FormInput","Field","FormError","ErrorMessage","name","type","title","htmlFor","component","IntupWrapper","SubmitForm","Form","Wrapper","initialValues","email","password","schema","Yup","shape","trim","min","matches","required","dispatch","useDispatch","isLoading","useSelector","selectIsLoading","error","selectError","onSubmit","resetForm","register","validationSchema","FormField","Button","disabled","Helmet"],"sourceRoot":""}