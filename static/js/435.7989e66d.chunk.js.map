{"version":3,"file":"static/js/435.7989e66d.chunk.js","mappings":"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","sources":["components/editContactModal/EditContactModal.styled.js","components/contactEditorForm/ContactEditorForm.styled.js","components/contactEditorForm/ContactEditorForm.jsx","components/editContactModal/EditContactModal.jsx","components/formField/FormField.styled.js","components/formField/FormField.jsx","components/formFieldWrapper/FormFieldWrapper.styled.js","components/formFieldWrapper/FormFieldWrapper.jsx","components/formikForm/FormikForm.styled.js","components/formikForm/FormikForm.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n`;\n\nexport const Modal = styled.div`\n  max-width: calc(100vw - 48px);\n  max-height: calc(100vh - 24px);\n`;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 16px;\n`;\n","import { Formik } from 'formik';\nimport FormikForm from 'components/formikForm/FormikForm';\nimport FormFieldWrapper from 'components/formFieldWrapper/FormFieldWrapper';\nimport FormField from 'components/formField/FormField';\nimport Button from 'components/button/Button';\nimport { useUpdateContactMutation } from 'redux/contacts/contactsSlice';\nimport * as Yup from 'yup';\nimport toast from 'react-hot-toast';\nimport { useNavigate } from 'react-router-dom';\nimport { Wrapper } from './ContactEditorForm.styled';\nimport PropTypes from 'prop-types';\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .trim()\n    .min(3, 'Too Short!')\n    .max(25, 'Too Long!')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Name is required'),\n  number: Yup.string()\n    .trim()\n    .min(7, 'Too Short!')\n    .max(15, 'Too Long!')\n    .matches(\n      /^(\\+?\\d+)?\\s*(\\(\\d+\\))?[\\s-]*([\\d-]*)$/,\n      'Phone number is not valid'\n    )\n    .required('Number is required'),\n});\n\nconst ContactEditorForm = ({ initialValues, id }) => {\n  const navigate = useNavigate();\n\n  const closeModal = () => navigate('/contacts');\n\n  const [updateContact, { isLoading }] = useUpdateContactMutation();\n\n  const handleSubmit = async ({ name, number }, { resetForm }) => {\n    try {\n      const contact = {\n        name: name.trim(),\n        number: number.trim(),\n      };\n\n      await updateContact({ id, contact });\n\n      closeModal();\n\n      resetForm();\n    } catch (error) {\n      toast.error('Error when editing contact');\n      console.log(error);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <FormikForm>\n        <FormFieldWrapper>\n          <FormField name=\"name\" type=\"text\" title=\"Name\" />\n          <FormField name=\"number\" type=\"tel\" title=\"Number\" />\n        </FormFieldWrapper>\n        <Wrapper>\n          <Button disabled={isLoading} type=\"button\" onClick={closeModal}>\n            {' '}\n            {isLoading ? 'in progress...' : 'Сlose edit form'}\n          </Button>\n          <Button disabled={isLoading} type=\"submit\">\n            {' '}\n            {isLoading ? 'in progress...' : 'Save changes'}\n          </Button>\n        </Wrapper>\n      </FormikForm>\n    </Formik>\n  );\n};\n\nexport default ContactEditorForm;\n\nContactEditorForm.propTypes = {\n  id: PropTypes.string.isRequired,\n  initialValues: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","import { createPortal } from 'react-dom';\nimport { useParams } from 'react-router-dom';\nimport { useGetContactsQuery } from 'redux/contacts/contactsSlice';\nimport { Overlay, Modal } from './EditContactModal.styled';\nimport ContactEditorForm from 'components/contactEditorForm/ContactEditorForm';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst EditContactModal = () => {\n  const { contactId } = useParams();\n\n  const { data: contacts } = useGetContactsQuery();\n\n  const contactById = contacts.filter(contact => contact.id === contactId);\n\n  return createPortal(\n    <Overlay>\n      <Modal>\n        {contactById && (\n          <ContactEditorForm\n            initialValues={{\n              name: contactById[0].name,\n              number: contactById[0].number,\n            }}\n            id={contactId}\n          />\n        )}\n      </Modal>\n    </Overlay>,\n    modalRoot\n  );\n};\n\nexport default EditContactModal;\n","import styled from 'styled-components';\nimport { Field, ErrorMessage } from 'formik';\n\nexport const FormLabel = styled.label`\n  font-weight: 700;\n  color: #757575;\n`;\n\nexport const FormInput = styled(Field)`\n  width: 300px;\n  padding: 3px;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const FormError = styled(ErrorMessage)`\n  max-width: 350px;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  font-size: 14px;\n  font-weight: 500;\n  color: #d8000c;\n`;\n","import PropTypes from 'prop-types';\nimport { FormLabel, FormInput, FormError } from './FormField.styled';\n\nconst FormField = ({ name, type, title }) => {\n  return (\n    <FormLabel htmlFor={name}>\n      {title}:\n      <FormInput type={type} name={name} />\n      <FormError name={name} component=\"p\" />\n    </FormLabel>\n  );\n};\n\nexport default FormField;\n\nFormField.propTypes = {\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\nexport const IntupWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 18px;\n  margin-bottom: 22px;\n`;\n","import PropTypes from 'prop-types';\nimport { IntupWrapper } from './FormFieldWrapper.styled';\n\nconst FormFieldWrapper = ({ children }) => {\n  return <IntupWrapper>{children}</IntupWrapper>;\n};\n\nexport default FormFieldWrapper;\n\nFormFieldWrapper.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import styled from 'styled-components';\nimport { Form } from 'formik';\n\nexport const SubmitForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 450px;\n  border: 2px solid #2196f3;\n  border-radius: 4px;\n  padding: 50px;\n  background-color: #fff;\n`;\n","import PropTypes from 'prop-types';\nimport { SubmitForm } from './FormikForm.styled';\n\nconst FormikForm = ({ children }) => {\n  return <SubmitForm>{children}</SubmitForm>;\n};\n\nexport default FormikForm;\n\nFormikForm.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n"],"names":["Overlay","styled","Modal","Wrapper","schema","Yup","shape","name","trim","min","max","matches","required","number","initialValues","id","navigate","useNavigate","closeModal","useUpdateContactMutation","updateContact","isLoading","handleSubmit","resetForm","contact","toast","console","log","onSubmit","validationSchema","FormikForm","FormFieldWrapper","FormField","type","title","Button","disabled","onClick","modalRoot","document","querySelector","contactId","useParams","contactById","useGetContactsQuery","data","filter","createPortal","FormLabel","FormInput","Field","FormError","ErrorMessage","htmlFor","component","IntupWrapper","children","SubmitForm","Form"],"sourceRoot":""}